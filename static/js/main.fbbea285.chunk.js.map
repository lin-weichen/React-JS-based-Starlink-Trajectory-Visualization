{"version":3,"sources":["assets/images/starlink_logo.svg","assets/images/satellite1.png","components/Header.js","components/Footer.js","components/SatSetting.js","components/SatelliteList.js","constants.js","components/WorldMap.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","starlinkLogo","alt","Component","Footer","SatSetting","onChangeLong","value","setState","observerLong","onChangeLat","observerLat","onChangeEle","observerElevation","onChangeAlt","satAlt","Number","onDurationChange","duration","showSatellite","props","onShow","state","isLoading","min","max","defaultValue","style","margin","onChange","this","placeholder","range","step","marks","0","90","size","onClick","SatelliteList","e","target","dataInfo","checked","selected","list","addOrRemove","item","status","found","some","entry","satid","push","filter","onShowSatMap","onShowMap","isLoad","satList","satInfo","above","disabled","length","tip","itemLayout","dataSource","renderItem","Item","actions","Meta","avatar","satellite","title","satname","description","launchDate","SAT_BASE_URL","NEARBY_SATELLITE","SATELLITE_POSITION_URL","WorldMap","map","color","d3Scale","schemeCategory10","refMap","React","createRef","refTrack","axios","get","then","res","data","land","feature","objects","countries","features","generateMap","catch","console","log","projection","geoKavrayskiy7","scale","translate","width","height","precision","graticule","geoGraticule","canvas","d3Select","current","attr","canvas2","context","node","getContext","context2","path","geoPath","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","prevProps","prevState","snapshot","satData","observerData","startTime","endTime","urls","sat","url","all","spread","args","Error","track","alert","len","positions","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","textAlign","fillText","d3TimeFormat","clearInterval","info","drawSat","pos","xy","satlongitude","satlatitude","arc","Math","PI","ref","Main","showNearbySatellite","setting","settings","isLoadingList","fetchSatellite","response","error","showMap","preState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fbbea285.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starlink_logo.142c8c7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite1.296b75ad.png\";","import React, { Component } from \"react\";\nimport starlinkLogo from \"../assets/images/starlink_logo.svg\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"title\">StarLink Tracker</p>\n      </header>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        ©2020 StarLink Tracker. All Rights Reserved. Website Made by Your name\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { InputNumber, Button, Slider } from \"antd\";\n\nclass SatSetting extends Component {\n  constructor() {\n    super();\n    this.state = {\n      observerLat: 0,\n      observerLong: 0,\n      observerElevation: 0,\n      satAlt: 90,\n      duration: [0, 90],\n      isLoading: false,\n    };\n  }\n\n  onChangeLong = (value) => {\n    this.setState({\n      observerLong: value,\n    });\n  };\n\n  onChangeLat = (value) => {\n    this.setState({\n      observerLat: value,\n    });\n  };\n\n  onChangeEle = (value) => {\n    this.setState({\n      observerElevation: value,\n    });\n  };\n  onChangeAlt = (value) => {\n    this.setState({\n      satAlt: Number(90 - +value),\n    });\n  };\n\n  onDurationChange = (value) => {\n    this.setState({\n      duration: value,\n    });\n  };\n\n  showSatellite = () => {\n    this.props.onShow(this.state);\n  };\n\n  render() {\n    const durationMarkers = { 0: \"0\", 90: \"90\" };\n    return (\n      <div className=\"sat-setting\">\n        <div className=\"loc-setting\">\n          <p className=\"setting-label\">From Location</p>\n          <div className=\"setting-list two-item-col\">\n            <div className=\"list-item\">\n              <label>Longitude: </label>\n              <InputNumber\n                min={-180}\n                max={180}\n                defaultValue={0}\n                style={{ margin: \"0 2px\" }}\n                onChange={this.onChangeLong}\n              />\n            </div>\n\n            <div className=\"list-item right-item\">\n              <label>Latitude: </label>\n              <InputNumber\n                placeholder=\"latitude\"\n                min={-90}\n                max={90}\n                defaultValue={0}\n                style={{ margin: \"0 2px\" }}\n                onChange={this.onChangeLat}\n              />\n            </div>\n          </div>\n          <div className=\"setting-list\">\n            <div className=\"list-item\">\n              <label>Elevation(meters): </label>\n              <InputNumber\n                min={-413}\n                max={8850}\n                defaultValue={0}\n                style={{ margin: \"0 2px\" }}\n                onChange={this.onChangeEle}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"altitude-setting\">\n          <p className=\"setting-label\">Restrictions</p>\n\n          <div>\n            <span>\n              Show only satellites which are higher than <br /> altitude\n            </span>\n            <InputNumber\n              min={0}\n              max={90}\n              defaultValue={0}\n              style={{ margin: \"8px 2px 0\" }}\n              onChange={this.onChangeAlt}\n            />{\" \"}\n            <span>degrees.</span>\n          </div>\n        </div>\n\n        <div className=\"duration-setting\">\n          <p className=\"setting-label\">Duration(sec)</p>\n\n          <Slider\n            className=\"duration-slider\"\n            range\n            step={1}\n            defaultValue={[0, 90]}\n            min={0}\n            max={90}\n            marks={durationMarkers}\n            onChange={this.onDurationChange}\n          />\n        </div>\n\n        <div className=\"show-nearby\">\n          <Button\n            className=\"show-nearby-btn\"\n            size=\"large\"\n            onClick={this.showSatellite}\n          >\n            Find Nearby Satellites\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SatSetting;\n","import React, { Component } from \"react\";\nimport { List, Avatar, Button, Checkbox, Spin } from \"antd\";\nimport satellite from \"../assets/images/satellite1.png\";\n\nclass SatelliteList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected: [],\n      isLoad: false,\n    };\n  }\n\n  onChange = (e) => {\n    const { dataInfo, checked } = e.target;\n    const { selected } = this.state;\n    const list = this.addOrRemove(dataInfo, checked, selected);\n    this.setState({ selected: list });\n  };\n\n  addOrRemove = (item, status, list) => {\n    const found = list.some((entry) => entry.satid === item.satid);\n    if (status && !found) {\n      list.push(item);\n    }\n\n    if (!status && found) {\n      list = list.filter((entry) => {\n        return entry.satid !== item.satid;\n      });\n    }\n    return list;\n  };\n\n  onShowSatMap = () => {\n    this.props.onShowMap(this.state.selected);\n  };\n\n  render() {\n    const satList = this.props.satInfo ? this.props.satInfo.above : [];\n    const { isLoad } = this.props;\n    const { selected } = this.state;\n\n    return (\n      <div className=\"sat-list-box\">\n        <Button\n          className=\"sat-list-btn\"\n          size=\"large\"\n          disabled={selected.length === 0}\n          onClick={this.onShowSatMap}\n        >\n          Track on the map\n        </Button>\n        <hr />\n\n        {isLoad ? (\n          <div className=\"spin-box\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : (\n          <List\n            className=\"sat-list\"\n            itemLayout=\"horizontal\"\n            size=\"small\"\n            dataSource={satList}\n            renderItem={(item) => (\n              <List.Item\n                actions={[\n                  <Checkbox dataInfo={item} onChange={this.onChange} />,\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={<Avatar size={50} src={satellite} />}\n                  title={<p>{item.satname}</p>}\n                  description={`Launch Date: ${item.launchDate}`}\n                />\n              </List.Item>\n            )}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SatelliteList;\n","export const SAT_BASE_URL = \"https://www.n2yo.com/rest/v1/satellite\";\n\nexport const SAT_API_KEY = \"PFBQS5-54VGVE-JKPNNW-4IAJ\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = `${SAT_BASE_URL}/above`;\n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = `${SAT_BASE_URL}/positions`;\n","import React, { Component } from \"react\";\nimport { feature } from \"topojson-client\";\nimport axios from \"axios\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport * as d3Scale from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { Spin } from \"antd\";\n\nimport {\n  WORLD_MAP_URL,\n  SAT_API_KEY,\n  SATELLITE_POSITION_URL,\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      map: null,\n      color: d3Scale.scaleOrdinal(schemeCategory10),\n      isLoad: false,\n    };\n\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then((res) => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch((e) => console.log(\"err in fetch world map data \", e));\n  }\n\n  generateMap(land) {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    let context = canvas.node().getContext(\"2d\");\n    let context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath().projection(projection).context(context);\n\n    land.forEach((ele) => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n    this.setState({\n      map: {\n        projection: projection,\n        graticule: graticule,\n        context: context,\n        context2: context2,\n      },\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.satData !== prevProps.satData) {\n      //get observer data\n      const { observerLat, observerLong, duration } = this.props.observerData;\n\n      const startTime = duration[0] * 60,\n        endTime = duration[1] * 60;\n      //get urls\n      const urls = this.props.satData.map((sat) => {\n        const { satid } = sat;\n        const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${startTime}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n\n      this.setState(() => ({ isLoad: true }));\n\n      //fetch satallite pass\n      axios\n        .all(urls)\n        .then(\n          axios.spread((...args) => {\n            return args.map((item) => item.data);\n          })\n        )\n        .then((res) => {\n          if (res.length > 0) {\n            this.track(res);\n          } else {\n            throw new Error(\"no sat position info\");\n          }\n          this.setState(() => ({ isLoad: false }));\n        })\n        .catch((e) => {\n          console.log(\"error in fetch satellite position\");\n          alert(\"error in fetch satellite position\" + e);\n        });\n    }\n  }\n\n  track(data) {\n    console.log(\"2 -> \", data);\n    const { duration } = this.props.observerData;\n    const len = data[0].positions.length;\n    const { context2 } = this.state.map;\n    let now = new Date();\n\n    let i = 0;\n    let timer = setInterval(() => {\n      // how much time passed from the start?\n      let timePassed = Date.now() - now;\n\n      if (i === 0) {\n        now.setSeconds(now.getSeconds() + duration[0] * 60);\n      }\n\n      let time = new Date(now.getTime() + 60 * timePassed);\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer); // finish the animation after 2 seconds\n        return;\n      }\n\n      // draw the animation at the moment timePassed\n      data.forEach((sat) => {\n        const { info, positions } = sat;\n        // console.log('1111 -> ', info, positions);\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  }\n\n  drawSat(sat, pos) {\n    const { projection, context2 } = this.state.map;\n    const xy = projection([pos.satlongitude, pos.satlatitude]);\n\n    context2.fillStyle = this.state.color(sat.satname);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(sat.satname, xy[0], xy[1] + 14);\n  }\n\n  render() {\n    const { isLoad } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoad ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n      </div>\n    );\n  }\n}\n\nexport default WorldMap;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from \"../constants\";\n\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      satInfo: null,\n      isLoadingList: false,\n      settings: null,\n      satList: null,\n    };\n  }\n  showNearbySatellite = (setting) => {\n    this.setState({\n      settings: setting,\n      isLoadingList: true,\n    });\n    this.fetchSatellite(setting);\n  };\n\n  fetchSatellite = (setting) => {\n    const { observerLat, observerLong, observerElevation, satAlt } = setting;\n    const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerElevation}/${satAlt}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n    this.setState({\n      isLoadingList: true,\n    });\n\n    axios\n      .get(url)\n      .then((response) => {\n        console.log(response.data);\n        this.setState({\n          satInfo: response.data,\n          isLoadingList: false,\n        });\n      })\n      .catch((error) => {\n        console.log(\"err in fetch satellite -> \", error);\n      });\n  };\n\n  showMap = (selected) => {\n    this.setState((preState) => ({\n      ...preState,\n      satList: [...selected],\n    }));\n  };\n\n  render() {\n    const { satInfo } = this.state;\n    return (\n      <div className=\"main\">\n        <div className=\"left-side\">\n          <SatSetting onShow={this.showNearbySatellite} />\n          <SatelliteList\n            satInfo={satInfo}\n            onShowMap={this.showMap}\n            onShowMap={this.showMap}\n          />\n        </div>\n        <div className=\"right-side\">\n          <WorldMap\n            satData={this.state.satList}\n            observerData={this.state.settings}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}